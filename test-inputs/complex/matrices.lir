struct matrix {
  cols:int
  data:&&int
  rows:int
}

I:&(int) -> &matrix
add:&(&matrix, &matrix) -> &matrix
assertEq:&(int, int) -> _
complexRepr:&(int, int) -> &matrix
mul:&(&matrix, &matrix) -> &matrix
neg:&(&matrix) -> &matrix
printM:&(&matrix) -> _
trace:&(&matrix) -> int
zero:&(int, int) -> &matrix

extern print:(int) -> _

fn I(n:int) -> &matrix {
let I:&matrix, _t1:&matrix, _t10:int, _t2:int, _t3:&&&int, _t4:&&int, _t5:&&int, _t6:int, _t7:&int, _t8:&int, _t9:int
bb1:
  I = $copy _t1
  $jump bb2

bb2:
  _t2 = $cmp gt n 0
  $branch _t2 bb3 bb4

bb3:
  _t3 = $gfp I data
  _t4 = $load _t3
  _t6 = $arith sub n 1
  _t5 = $gep _t4 _t6
  _t7 = $load _t5
  _t9 = $arith sub n 1
  _t8 = $gep _t7 _t9
  $store _t8 1
  _t10 = $arith sub n 1
  n = $copy _t10
  $jump bb2

bb4:
  $ret I

entry:
  _t1 = $call_dir zero(n, n) then bb1
}

fn add(A:&matrix, B:&matrix) -> &matrix {
let C:&matrix, _t1:&int, _t10:int, _t11:&int, _t12:int, _t13:&matrix, _t14:&int, _t15:int, _t16:int, _t17:&int, _t18:int, _t19:int, _t2:int, _t20:&&&int, _t21:&&int, _t22:&&int, _t23:&int, _t24:&int, _t25:&&&int, _t26:&&int, _t27:&&int, _t28:&int, _t29:&int, _t3:&int, _t30:int, _t31:&&&int, _t32:&&int, _t33:&&int, _t34:&int, _t35:&int, _t36:int, _t37:int, _t38:int, _t39:int, _t4:int, _t5:&int, _t6:int, _t7:&int, _t8:int, _t9:&int, i:int, j:int
bb1:
  _t5 = $gfp A cols
  _t6 = $load _t5
  _t7 = $gfp B cols
  _t8 = $load _t7
  $call_dir assertEq(_t6, _t8) then bb2

bb2:
  _t9 = $gfp A rows
  _t10 = $load _t9
  _t11 = $gfp A cols
  _t12 = $load _t11
  _t13 = $call_dir zero(_t10, _t12) then bb3

bb3:
  C = $copy _t13
  $jump bb4

bb4:
  _t14 = $gfp C rows
  _t15 = $load _t14
  _t16 = $cmp lt i _t15
  $branch _t16 bb5 bb6

bb5:
  j = $copy 0
  $jump bb7

bb6:
  $ret C

bb7:
  _t17 = $gfp C cols
  _t18 = $load _t17
  _t19 = $cmp lt j _t18
  $branch _t19 bb8 bb9

bb8:
  _t20 = $gfp C data
  _t21 = $load _t20
  _t22 = $gep _t21 i
  _t23 = $load _t22
  _t24 = $gep _t23 j
  _t25 = $gfp A data
  _t26 = $load _t25
  _t27 = $gep _t26 i
  _t28 = $load _t27
  _t29 = $gep _t28 j
  _t30 = $load _t29
  _t31 = $gfp B data
  _t32 = $load _t31
  _t33 = $gep _t32 i
  _t34 = $load _t33
  _t35 = $gep _t34 j
  _t36 = $load _t35
  _t37 = $arith add _t30 _t36
  $store _t24 _t37
  _t38 = $arith add j 1
  j = $copy _t38
  $jump bb7

bb9:
  _t39 = $arith add i 1
  i = $copy _t39
  $jump bb4

entry:
  _t1 = $gfp A rows
  _t2 = $load _t1
  _t3 = $gfp B rows
  _t4 = $load _t3
  $call_dir assertEq(_t2, _t4) then bb1
}

fn assertEq(a:int, b:int) -> _ {
let _t1:int, p:&int
bb1:
  $ret 

bb2:
  $store p 0
  $jump bb1

entry:
  _t1 = $cmp neq a b
  $branch _t1 bb2 bb1
}

fn complexRepr(a:int, b:int) -> &matrix {
let _t1:&matrix, _t10:&int, _t11:&int, _t12:int, _t13:&&&int, _t14:&&int, _t15:&&int, _t16:&int, _t17:&int, _t18:&&&int, _t19:&&int, _t2:&&&int, _t20:&&int, _t21:&int, _t22:&int, _t3:&&int, _t4:&&int, _t5:&int, _t6:&int, _t7:&&&int, _t8:&&int, _t9:&&int, z:&matrix
bb1:
  z = $copy _t1
  _t2 = $gfp z data
  _t3 = $load _t2
  _t4 = $gep _t3 0
  _t5 = $load _t4
  _t6 = $gep _t5 0
  $store _t6 a
  _t7 = $gfp z data
  _t8 = $load _t7
  _t9 = $gep _t8 0
  _t10 = $load _t9
  _t11 = $gep _t10 1
  _t12 = $arith sub 0 b
  $store _t11 _t12
  _t13 = $gfp z data
  _t14 = $load _t13
  _t15 = $gep _t14 1
  _t16 = $load _t15
  _t17 = $gep _t16 0
  $store _t17 b
  _t18 = $gfp z data
  _t19 = $load _t18
  _t20 = $gep _t19 1
  _t21 = $load _t20
  _t22 = $gep _t21 1
  $store _t22 a
  $ret z

entry:
  _t1 = $call_dir zero(2, 2) then bb1
}

fn main() -> int {
let _t1:&matrix, _t2:&matrix, _t3:&matrix, _t4:&matrix, _t5:int, a:&matrix, b:&matrix
bb1:
  _t2 = $call_dir I(2) then bb2

bb2:
  _t3 = $call_dir add(_t1, _t2) then bb3

bb3:
  a = $copy _t3
  _t4 = $call_dir mul(a, a) then bb4

bb4:
  b = $copy _t4
  $call_dir printM(a) then bb5

bb5:
  $call_dir printM(b) then bb6

bb6:
  _t5 = $call_dir trace(b) then bb7

bb7:
  $ret _t5

entry:
  _t1 = $call_dir complexRepr(3, 3) then bb1
}

fn mul(A:&matrix, B:&matrix) -> &matrix {
let C:&matrix, _t1:&int, _t10:&int, _t11:int, _t12:int, _t13:&int, _t14:int, _t15:int, _t16:&int, _t17:int, _t18:int, _t19:&&&int, _t2:int, _t20:&&int, _t21:&&int, _t22:&int, _t23:&int, _t24:&&&int, _t25:&&int, _t26:&&int, _t27:&int, _t28:&int, _t29:int, _t3:&int, _t30:&&&int, _t31:&&int, _t32:&&int, _t33:&int, _t34:&int, _t35:int, _t36:&&&int, _t37:&&int, _t38:&&int, _t39:&int, _t4:int, _t40:&int, _t41:int, _t42:int, _t43:int, _t44:int, _t45:int, _t46:int, _t5:&int, _t6:int, _t7:&int, _t8:int, _t9:&matrix, i:int, j:int, k:int
bb1:
  _t5 = $gfp A rows
  _t6 = $load _t5
  _t7 = $gfp B cols
  _t8 = $load _t7
  _t9 = $call_dir zero(_t6, _t8) then bb2

bb10:
  _t19 = $gfp C data
  _t20 = $load _t19
  _t21 = $gep _t20 i
  _t22 = $load _t21
  _t23 = $gep _t22 k
  _t24 = $gfp C data
  _t25 = $load _t24
  _t26 = $gep _t25 i
  _t27 = $load _t26
  _t28 = $gep _t27 k
  _t29 = $load _t28
  _t30 = $gfp A data
  _t31 = $load _t30
  _t32 = $gep _t31 i
  _t33 = $load _t32
  _t34 = $gep _t33 j
  _t35 = $load _t34
  _t36 = $gfp B data
  _t37 = $load _t36
  _t38 = $gep _t37 j
  _t39 = $load _t38
  _t40 = $gep _t39 k
  _t41 = $load _t40
  _t42 = $arith mul _t35 _t41
  _t43 = $arith add _t29 _t42
  $store _t23 _t43
  _t44 = $arith add k 1
  k = $copy _t44
  $jump bb9

bb11:
  _t45 = $arith add j 1
  j = $copy _t45
  $jump bb6

bb2:
  C = $copy _t9
  $jump bb3

bb3:
  _t10 = $gfp A rows
  _t11 = $load _t10
  _t12 = $cmp lt i _t11
  $branch _t12 bb4 bb5

bb4:
  j = $copy 0
  $jump bb6

bb5:
  $ret C

bb6:
  _t13 = $gfp A cols
  _t14 = $load _t13
  _t15 = $cmp lt j _t14
  $branch _t15 bb7 bb8

bb7:
  k = $copy 0
  $jump bb9

bb8:
  _t46 = $arith add i 1
  i = $copy _t46
  $jump bb3

bb9:
  _t16 = $gfp B cols
  _t17 = $load _t16
  _t18 = $cmp lt k _t17
  $branch _t18 bb10 bb11

entry:
  _t1 = $gfp A cols
  _t2 = $load _t1
  _t3 = $gfp B rows
  _t4 = $load _t3
  $call_dir assertEq(_t2, _t4) then bb1
}

fn neg(A:&matrix) -> &matrix {
let C:&matrix, _t1:&int, _t10:int, _t11:int, _t12:&&&int, _t13:&&int, _t14:&&int, _t15:&int, _t16:&int, _t17:&&&int, _t18:&&int, _t19:&&int, _t2:int, _t20:&int, _t21:&int, _t22:int, _t23:int, _t24:int, _t25:int, _t3:&int, _t4:int, _t5:&matrix, _t6:&int, _t7:int, _t8:int, _t9:&int, i:int, j:int
bb1:
  C = $copy _t5
  $jump bb2

bb2:
  _t6 = $gfp C rows
  _t7 = $load _t6
  _t8 = $cmp lt i _t7
  $branch _t8 bb3 bb4

bb3:
  j = $copy 0
  $jump bb5

bb4:
  $ret C

bb5:
  _t9 = $gfp C cols
  _t10 = $load _t9
  _t11 = $cmp lt j _t10
  $branch _t11 bb6 bb7

bb6:
  _t12 = $gfp C data
  _t13 = $load _t12
  _t14 = $gep _t13 i
  _t15 = $load _t14
  _t16 = $gep _t15 j
  _t17 = $gfp A data
  _t18 = $load _t17
  _t19 = $gep _t18 i
  _t20 = $load _t19
  _t21 = $gep _t20 j
  _t22 = $load _t21
  _t23 = $arith sub 0 _t22
  $store _t16 _t23
  _t24 = $arith add j 1
  j = $copy _t24
  $jump bb5

bb7:
  _t25 = $arith add i 1
  i = $copy _t25
  $jump bb2

entry:
  _t1 = $gfp A rows
  _t2 = $load _t1
  _t3 = $gfp A cols
  _t4 = $load _t3
  _t5 = $call_dir zero(_t2, _t4) then bb1
}

fn printM(A:&matrix) -> _ {
let _t1:&int, _t10:&int, _t11:&int, _t12:int, _t13:int, _t14:int, _t2:int, _t3:int, _t4:&int, _t5:int, _t6:int, _t7:&&&int, _t8:&&int, _t9:&&int, i:int, j:int
bb1:
  _t1 = $gfp A rows
  _t2 = $load _t1
  _t3 = $cmp lt i _t2
  $branch _t3 bb2 bb3

bb2:
  j = $copy 0
  $jump bb4

bb3:
  $ret 

bb4:
  _t4 = $gfp A cols
  _t5 = $load _t4
  _t6 = $cmp lt j _t5
  $branch _t6 bb5 bb6

bb5:
  _t7 = $gfp A data
  _t8 = $load _t7
  _t9 = $gep _t8 i
  _t10 = $load _t9
  _t11 = $gep _t10 j
  _t12 = $load _t11
  $call_ext print(_t12)
  _t13 = $arith add j 1
  j = $copy _t13
  $jump bb4

bb6:
  _t14 = $arith add i 1
  i = $copy _t14
  $jump bb1

entry:
  $jump bb1
}

fn trace(A:&matrix) -> int {
let _t1:&int, _t10:&&int, _t11:&int, _t12:&int, _t13:int, _t14:int, _t15:int, _t2:int, _t3:&int, _t4:int, _t5:&int, _t6:int, _t7:int, _t8:&&&int, _t9:&&int, i:int, t:int
bb1:
  $jump bb2

bb2:
  _t5 = $gfp A rows
  _t6 = $load _t5
  _t7 = $cmp lt i _t6
  $branch _t7 bb3 bb4

bb3:
  _t8 = $gfp A data
  _t9 = $load _t8
  _t10 = $gep _t9 i
  _t11 = $load _t10
  _t12 = $gep _t11 i
  _t13 = $load _t12
  _t14 = $arith add t _t13
  t = $copy _t14
  _t15 = $arith add i 1
  i = $copy _t15
  $jump bb2

bb4:
  $ret t

entry:
  _t1 = $gfp A rows
  _t2 = $load _t1
  _t3 = $gfp A cols
  _t4 = $load _t3
  $call_dir assertEq(_t2, _t4) then bb1
}

fn zero(n:int, m:int) -> &matrix {
let A:&matrix, _t1:&&&int, _t10:&int, _t11:int, _t2:&&int, _t3:&int, _t4:&int, _t5:int, _t6:&&&int, _t7:&&int, _t8:&&int, _t9:int
bb1:
  _t5 = $cmp gt n 0
  $branch _t5 bb2 bb3

bb2:
  _t6 = $gfp A data
  _t7 = $load _t6
  _t9 = $arith sub n 1
  _t8 = $gep _t7 _t9
  _t10 = $alloc m [_alloc3]
  $store _t8 _t10
  _t11 = $arith sub n 1
  n = $copy _t11
  $jump bb1

bb3:
  $ret A

entry:
  A = $alloc 1 [_alloc1]
  _t1 = $gfp A data
  _t2 = $alloc n [_alloc2]
  $store _t1 _t2
  _t3 = $gfp A rows
  $store _t3 n
  _t4 = $gfp A cols
  $store _t4 n
  $jump bb1
}

