struct env {
  next:&env
  v:&value
  x:&var
}

struct term {
  kind:int
  n:int
  t1:&term
  t2:&term
  x:&var
}

struct value {
  body:&term
  env:&env
  kind:int
  n:int
  x:&var
}

struct var {
  id:int
}

ADD:int
APP:int
CLO:int
CONST:int
LAM:int
NUM:int
VAR:int
add:&(&term, &term) -> &term
apply:&(&term, &term) -> &term
bind:&(&env, &var, &value) -> &env
const:&(int) -> &term
eval:&(&env, &term) -> &value
evalA:&(&env, &term, &value) -> _
evalImpl:&&(&env, &term, &value) -> _
evalL:&(&env, &term, &value) -> _
evalN:&(&env, &term, &value) -> _
evalP:&(&env, &term, &value) -> _
evalX:&(&env, &term, &value) -> _
indent:int
init:&() -> _
lambda:&(&var, &term) -> &term
lookup:&(&env, &var) -> &value
printE:&(&term) -> _
printI:&(int) -> _
printV:&(&value) -> _
var:&(&var) -> &term

extern print:(int) -> _

fn add(t1:&term, t2:&term) -> &term {
let _t1:&int, _t2:&&term, _t3:&&term, t:&term
entry:
  t = $alloc 1 [_alloc2]
  _t1 = $gfp t kind
  $store _t1 ADD
  _t2 = $gfp t t1
  $store _t2 t1
  _t3 = $gfp t t2
  $store _t3 t2
  $ret t
}

fn apply(t1:&term, t2:&term) -> &term {
let _t1:&int, _t2:&&term, _t3:&&term, t:&term
entry:
  t = $alloc 1 [_alloc1]
  _t1 = $gfp t kind
  $store _t1 APP
  _t2 = $gfp t t1
  $store _t2 t1
  _t3 = $gfp t t2
  $store _t3 t2
  $ret t
}

fn bind(env:&env, x:&var, v:&value) -> &env {
let _t1:&&var, _t2:&&value, _t3:&&env, e:&env
entry:
  e = $alloc 1 [_alloc6]
  _t1 = $gfp e x
  $store _t1 x
  _t2 = $gfp e v
  $store _t2 v
  _t3 = $gfp e next
  $store _t3 env
  $ret e
}

fn const(n:int) -> &term {
let _t1:&int, _t2:&int, t:&term
entry:
  t = $alloc 1 [_alloc5]
  _t1 = $gfp t kind
  $store _t1 CONST
  _t2 = $gfp t n
  $store _t2 n
  $ret t
}

fn eval(env:&env, t:&term) -> &value {
let _t1:int, _t2:&&(&env, &term, &value) -> _, _t3:&int, _t4:int, _t5:&(&env, &term, &value) -> _, _t6:int, v:&value, v1:&value, v2:&value
bb1:
  _t6 = $arith sub indent 1
  indent = $copy _t6
  $ret v

entry:
  v = $alloc 1 [_alloc7]
  _t1 = $arith add indent 1
  indent = $copy _t1
  _t3 = $gfp t kind
  _t4 = $load _t3
  _t2 = $gep evalImpl _t4
  _t5 = $load _t2
  $call_idr _t5(env, t, v) then bb1
}

fn evalA(env:&env, t:&term, v:&value) -> _ {
let _t1:&&term, _t10:&var, _t11:&env, _t12:&&term, _t13:&term, _t14:&value, _t15:value, _t2:&term, _t3:&value, _t4:&&term, _t5:&term, _t6:&value, _t7:&&env, _t8:&env, _t9:&&var, v1:&value, v2:&value
bb1:
  v1 = $copy _t3
  _t4 = $gfp t t2
  _t5 = $load _t4
  _t6 = $call_dir eval(env, _t5) then bb2

bb2:
  v2 = $copy _t6
  _t7 = $gfp v1 env
  _t8 = $load _t7
  _t9 = $gfp v1 x
  _t10 = $load _t9
  _t11 = $call_dir bind(_t8, _t10, v2) then bb3

bb3:
  _t12 = $gfp v1 body
  _t13 = $load _t12
  _t14 = $call_dir eval(_t11, _t13) then bb4

bb4:
  _t15 = $load _t14
  $store v _t15
  $ret 

entry:
  _t1 = $gfp t t1
  _t2 = $load _t1
  _t3 = $call_dir eval(env, _t2) then bb1
}

fn evalL(env:&env, t:&term, v:&value) -> _ {
let _t1:&int, _t2:&&env, _t3:&&term, _t4:&&term, _t5:&term, _t6:&&var, _t7:&&var, _t8:&var
entry:
  _t1 = $gfp v kind
  $store _t1 CLO
  _t2 = $gfp v env
  $store _t2 env
  _t3 = $gfp v body
  _t4 = $gfp t t1
  _t5 = $load _t4
  $store _t3 _t5
  _t6 = $gfp v x
  _t7 = $gfp t x
  _t8 = $load _t7
  $store _t6 _t8
  $ret 
}

fn evalN(env:&env, t:&term, v:&value) -> _ {
let _t1:&int, _t2:&int, _t3:&int, _t4:int
entry:
  _t1 = $gfp v kind
  $store _t1 NUM
  _t2 = $gfp v n
  _t3 = $gfp t n
  _t4 = $load _t3
  $store _t2 _t4
  $ret 
}

fn evalP(env:&env, t:&term, v:&value) -> _ {
let _t1:&&term, _t10:int, _t11:&int, _t12:int, _t13:int, _t2:&term, _t3:&value, _t4:&&term, _t5:&term, _t6:&value, _t7:&int, _t8:&int, _t9:&int, v1:&value, v2:&value
bb1:
  v1 = $copy _t3
  _t4 = $gfp t t2
  _t5 = $load _t4
  _t6 = $call_dir eval(env, _t5) then bb2

bb2:
  v2 = $copy _t6
  _t7 = $gfp v kind
  $store _t7 NUM
  _t8 = $gfp v n
  _t9 = $gfp v1 n
  _t10 = $load _t9
  _t11 = $gfp v2 n
  _t12 = $load _t11
  _t13 = $arith add _t10 _t12
  $store _t8 _t13
  $ret 

entry:
  _t1 = $gfp t t1
  _t2 = $load _t1
  _t3 = $call_dir eval(env, _t2) then bb1
}

fn evalX(env:&env, t:&term, v:&value) -> _ {
let _t1:&&var, _t2:&var, _t3:&value, _t4:value
bb1:
  _t4 = $load _t3
  $store v _t4
  $ret 

entry:
  _t1 = $gfp t x
  _t2 = $load _t1
  _t3 = $call_dir lookup(env, _t2) then bb1
}

fn init() -> _ {
let _t1:&&(&env, &term, &value) -> _, _t2:&&(&env, &term, &value) -> _, _t3:&&(&env, &term, &value) -> _, _t4:&&(&env, &term, &value) -> _, _t5:&&(&env, &term, &value) -> _
entry:
  VAR = $copy 0
  APP = $copy 1
  LAM = $copy 2
  CONST = $copy 3
  ADD = $copy 4
  NUM = $copy 1
  CLO = $copy 2
  evalImpl = $alloc 5 [_alloc8]
  _t1 = $gep evalImpl VAR
  $store _t1 evalX
  _t2 = $gep evalImpl APP
  $store _t2 evalA
  _t3 = $gep evalImpl LAM
  $store _t3 evalL
  _t4 = $gep evalImpl CONST
  $store _t4 evalN
  _t5 = $gep evalImpl ADD
  $store _t5 evalP
  $ret 
}

fn lambda(x:&var, t1:&term) -> &term {
let _t1:&int, _t2:&&var, _t3:&&term, t:&term
entry:
  t = $alloc 1 [_alloc3]
  _t1 = $gfp t kind
  $store _t1 LAM
  _t2 = $gfp t x
  $store _t2 x
  _t3 = $gfp t t1
  $store _t3 t1
  $ret t
}

fn lookup(env:&env, x:&var) -> &value {
let _ret11:&value, _t1:int, _t10:int, _t2:&&var, _t3:&var, _t4:int, _t5:&&value, _t6:&value, _t7:&&env, _t8:&env, _t9:&int, dummy:&value
bb1:
  _t1 = $cmp neq env 0
  $branch _t1 bb2 bb3

bb2:
  _t2 = $gfp env x
  _t3 = $load _t2
  _t4 = $cmp eq _t3 x
  $branch _t4 bb5 bb4

bb3:
  _t9 = $gfp dummy kind
  _t10 = $arith sub 0 1
  $store _t9 _t10
  _ret11 = $copy 0
  $jump exit

bb4:
  _t7 = $gfp env next
  _t8 = $load _t7
  env = $copy _t8
  $jump bb1

bb5:
  _t5 = $gfp env v
  _t6 = $load _t5
  _ret11 = $copy _t6
  $jump exit

entry:
  $jump bb1

exit:
  $ret _ret11
}

fn main() -> int {
let _t1:&int, _t10:&term, _t11:&term, _t12:&term, _t13:&term, _t14:&term, _t15:&term, _t16:&term, _t17:&term, _t18:&term, _t19:&value, _t2:int, _t3:&int, _t4:int, _t5:&term, _t6:&term, _t7:&term, _t8:&term, _t9:&term, apply2:&term, double:&term, env:&env, t:&term, x:&var, y:&var
bb1:
  x = $alloc 1 [_alloc9]
  _t1 = $gfp x id
  _t2 = $arith sub 0 1
  $store _t1 _t2
  y = $alloc 1 [_alloc10]
  _t3 = $gfp y id
  _t4 = $arith sub 0 2
  $store _t3 _t4
  env = $alloc 1 [_alloc11]
  _t5 = $call_dir var(x) then bb2

bb10:
  _t14 = $call_dir add(_t12, _t13) then bb11

bb11:
  _t15 = $call_dir lambda(x, _t14) then bb12

bb12:
  double = $copy _t15
  _t16 = $call_dir apply(apply2, double) then bb13

bb13:
  _t17 = $call_dir const(3) then bb14

bb14:
  _t18 = $call_dir apply(_t16, _t17) then bb15

bb15:
  t = $copy _t18
  $call_dir printE(t) then bb16

bb16:
  _t19 = $call_dir eval(env, t) then bb17

bb17:
  $call_dir printV(_t19) then bb18

bb18:
  $ret 0

bb2:
  _t6 = $call_dir var(x) then bb3

bb3:
  _t7 = $call_dir var(y) then bb4

bb4:
  _t8 = $call_dir apply(_t6, _t7) then bb5

bb5:
  _t9 = $call_dir apply(_t5, _t8) then bb6

bb6:
  _t10 = $call_dir lambda(y, _t9) then bb7

bb7:
  _t11 = $call_dir lambda(x, _t10) then bb8

bb8:
  apply2 = $copy _t11
  _t12 = $call_dir var(x) then bb9

bb9:
  _t13 = $call_dir var(x) then bb10

entry:
  $call_dir init() then bb1
}

fn printE(t:&term) -> _ {
let _lo1:int, _t10:&&var, _t11:&var, _t12:&int, _t13:int, _t14:&int, _t15:int, _t16:int, _t17:int, _t18:&int, _t19:int, _t2:int, _t20:int, _t21:&&term, _t22:&term, _t23:&&term, _t24:&term, _t25:&int, _t26:int, _t27:int, _t28:&&var, _t29:&var, _t3:int, _t30:&int, _t31:int, _t32:&&term, _t33:&term, _t34:&int, _t35:int, _t36:int, _t37:&int, _t38:int, _t39:int, _t4:&int, _t5:int, _t6:int, _t7:&int, _t8:int, _t9:int
bb1:
  _t4 = $gfp t kind
  _t5 = $load _t4
  $call_dir printI(_t5) then bb4

bb10:
  _t25 = $gfp t kind
  _t26 = $load _t25
  _t27 = $cmp eq _t26 LAM
  $branch _t27 bb15 bb14

bb11:
  _t21 = $gfp t t1
  _t22 = $load _t21
  $call_dir printE(_t22) then bb12

bb12:
  _t23 = $gfp t t2
  _t24 = $load _t23
  $call_dir printE(_t24) then bb13

bb13:
  $jump bb10

bb14:
  _t34 = $gfp t kind
  _t35 = $load _t34
  _t36 = $cmp eq _t35 CONST
  $branch _t36 bb19 bb18

bb15:
  _t28 = $gfp t x
  _t29 = $load _t28
  _t30 = $gfp _t29 id
  _t31 = $load _t30
  $call_dir printI(_t31) then bb16

bb16:
  _t32 = $gfp t t1
  _t33 = $load _t32
  $call_dir printE(_t33) then bb17

bb17:
  $jump bb14

bb18:
  _t39 = $arith sub indent 1
  indent = $copy _t39
  $jump exit

bb19:
  _t37 = $gfp t n
  _t38 = $load _t37
  $call_dir printI(_t38) then bb20

bb2:
  _t3 = $arith sub 0 1
  $call_dir printI(_t3) then bb3

bb20:
  $jump bb18

bb3:
  $jump exit

bb4:
  _t6 = $arith add indent 1
  indent = $copy _t6
  _t7 = $gfp t kind
  _t8 = $load _t7
  _t9 = $cmp eq _t8 VAR
  $branch _t9 bb6 bb5

bb5:
  _t14 = $gfp t kind
  _t15 = $load _t14
  _t16 = $cmp eq _t15 APP
  _lo1 = $copy _t16
  _t17 = $cmp eq _lo1 0
  $branch _t17 bb9 bb8

bb6:
  _t10 = $gfp t x
  _t11 = $load _t10
  _t12 = $gfp _t11 id
  _t13 = $load _t12
  $call_dir printI(_t13) then bb7

bb7:
  $jump bb5

bb8:
  $branch _lo1 bb11 bb10

bb9:
  _t18 = $gfp t kind
  _t19 = $load _t18
  _t20 = $cmp eq _t19 ADD
  _lo1 = $copy _t20
  $jump bb8

entry:
  _t2 = $cmp eq t 0
  $branch _t2 bb2 bb1

exit:
  $ret 
}

fn printI(n:int) -> _ {
let i:int
entry:
  $call_ext print(n)
  $ret 
}

fn printV(v:&value) -> _ {
let _t1:int, _t10:int, _t11:&int, _t12:int, _t13:int, _t14:&&var, _t15:&var, _t16:&int, _t17:int, _t18:&&term, _t19:&term, _t2:int, _t20:int, _t3:&int, _t4:int, _t5:int, _t6:&int, _t7:int, _t8:int, _t9:&int
bb1:
  $ret 

bb10:
  _t14 = $gfp v x
  _t15 = $load _t14
  _t16 = $gfp _t15 id
  _t17 = $load _t16
  $call_dir printI(_t17) then bb11

bb11:
  _t18 = $gfp v body
  _t19 = $load _t18
  $call_dir printE(_t19) then bb12

bb12:
  $jump bb9

bb2:
  _t2 = $arith sub 0 1
  $call_dir printI(_t2) then bb4

bb3:
  _t3 = $gfp v kind
  _t4 = $load _t3
  $call_dir printI(_t4) then bb5

bb4:
  $jump bb1

bb5:
  _t5 = $arith add indent 1
  indent = $copy _t5
  _t6 = $gfp v kind
  _t7 = $load _t6
  _t8 = $cmp eq _t7 NUM
  $branch _t8 bb7 bb6

bb6:
  _t11 = $gfp v kind
  _t12 = $load _t11
  _t13 = $cmp eq _t12 CLO
  $branch _t13 bb10 bb9

bb7:
  _t9 = $gfp v n
  _t10 = $load _t9
  $call_dir printI(_t10) then bb8

bb8:
  $jump bb6

bb9:
  _t20 = $arith sub indent 1
  indent = $copy _t20
  $jump bb1

entry:
  _t1 = $cmp eq v 0
  $branch _t1 bb2 bb3
}

fn var(x:&var) -> &term {
let _t1:&int, _t2:&&var, t:&term
entry:
  t = $alloc 1 [_alloc4]
  _t1 = $gfp t kind
  $store _t1 VAR
  _t2 = $gfp t x
  $store _t2 x
  $ret t
}

