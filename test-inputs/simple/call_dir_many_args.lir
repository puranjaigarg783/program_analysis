foo:&(int, int, int, int, int, int, int, int) -> int

extern print:(int) -> _

fn foo(a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int) -> int {
let _t1:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int
entry:
  $call_ext print(a)
  $call_ext print(b)
  $call_ext print(c)
  $call_ext print(d)
  $call_ext print(e)
  $call_ext print(f)
  $call_ext print(g)
  $call_ext print(h)
  _t1 = $arith mul a 10
  _t2 = $arith add _t1 b
  a = $copy _t2
  _t3 = $arith mul a 10
  _t4 = $arith add _t3 c
  a = $copy _t4
  _t5 = $arith mul a 10
  _t6 = $arith add _t5 d
  a = $copy _t6
  _t7 = $arith mul a 10
  _t8 = $arith add _t7 e
  a = $copy _t8
  _t9 = $arith mul a 10
  _t10 = $arith add _t9 f
  a = $copy _t10
  _t11 = $arith mul a 10
  _t12 = $arith add _t11 g
  a = $copy _t12
  _t13 = $arith mul a 10
  _t14 = $arith add _t13 h
  a = $copy _t14
  $call_ext print(a)
  $ret a
}

fn main() -> int {
let _t1:int, _t2:int, _t3:int, _t4:int, x:int
bb1:
  x = $copy _t1
  $call_ext print(x)
  _t2 = $arith div x 107
  _t3 = $arith mul _t2 107
  _t4 = $arith sub x _t3
  x = $copy _t4
  $ret x

entry:
  _t1 = $call_dir foo(1, 3, 5, 7, 2, 4, 6, 8) then bb1
}

