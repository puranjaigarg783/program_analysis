fact:&(int) -> int

fn fact(n:int) -> int {
let _ret5:int, _t1:int, _t2:int, _t3:int, _t4:int
bb1:
  _t2 = $arith sub n 1
  _t3 = $call_dir fact(_t2) then bb3

bb2:
  _ret5 = $copy 1
  $jump exit

bb3:
  _t4 = $arith mul n _t3
  _ret5 = $copy _t4
  $jump exit

entry:
  _t1 = $cmp eq n 0
  $branch _t1 bb2 bb1

exit:
  $ret _ret5
}

fn main() -> int {
let _t1:int
bb1:
  $ret _t1

entry:
  _t1 = $call_dir fact(4) then bb1
}

