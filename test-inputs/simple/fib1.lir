fib:&(int) -> int

extern print:(int) -> _

fn fib(n:int) -> int {
let _t1:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, result:int
bb1:
  $ret result

bb2:
  _t2 = $arith sub n 1
  _t3 = $call_dir fib(_t2) then bb3

bb3:
  _t4 = $arith sub n 2
  _t5 = $call_dir fib(_t4) then bb4

bb4:
  _t6 = $arith add _t3 _t5
  result = $copy _t6
  $jump bb1

entry:
  result = $copy 1
  $call_ext print(n)
  _t1 = $cmp gt n 2
  $branch _t1 bb2 bb1
}

fn main() -> int {
let _t1:int
bb1:
  $ret _t1

entry:
  _t1 = $call_dir fib(6) then bb1
}

