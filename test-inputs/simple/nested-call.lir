hypo:&(int, int) -> int
square:&(int) -> int

fn hypo(x:int, y:int) -> int {
let _t1:int, _t2:int, _t3:int
bb1:
  _t2 = $call_dir square(y) then bb2

bb2:
  _t3 = $arith add _t1 _t2
  $ret _t3

entry:
  _t1 = $call_dir square(x) then bb1
}

fn main() -> int {
let _t1:int
bb1:
  $ret _t1

entry:
  _t1 = $call_dir hypo(3, 4) then bb1
}

fn square(x:int) -> int {
let _t1:int
entry:
  _t1 = $arith mul x x
  $ret _t1
}

