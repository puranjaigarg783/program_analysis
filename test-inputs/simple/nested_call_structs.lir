struct s {
  f1:int
  f2:int
  f3:int
}

bar:&(int) -> &s
baz:&(&s, &s) -> &s
foo:&(int) -> &s

extern print:(int) -> _

fn bar(n:int) -> &s {
let _t1:int, _t2:&s, _t3:&int, p:&s
bb1:
  p = $copy _t2
  _t3 = $gfp p f1
  $store _t3 100
  $ret p

entry:
  _t1 = $arith mul n 2
  _t2 = $call_dir foo(_t1) then bb1
}

fn baz(p:&s, q:&s) -> &s {
let _t1:&int, _t10:int, _t11:&int, _t12:int, _t13:&int, _t14:int, _t15:int, _t2:int, _t3:&int, _t4:int, _t5:int, _t6:&int, _t7:int, _t8:&int, _t9:int
entry:
  _t1 = $gfp p f1
  _t2 = $load _t1
  _t3 = $gfp q f1
  _t4 = $load _t3
  _t5 = $arith sub _t2 _t4
  $call_ext print(_t5)
  _t6 = $gfp p f2
  _t7 = $load _t6
  _t8 = $gfp q f2
  _t9 = $load _t8
  _t10 = $arith sub _t7 _t9
  $call_ext print(_t10)
  _t11 = $gfp p f3
  _t12 = $load _t11
  _t13 = $gfp q f3
  _t14 = $load _t13
  _t15 = $arith sub _t12 _t14
  $call_ext print(_t15)
  $ret p
}

fn foo(n:int) -> &s {
let _t1:&int, _t2:&int, _t3:int, _t4:&int, _t5:int, p:&s
entry:
  p = $alloc 1 [_alloc1]
  _t1 = $gfp p f1
  $store _t1 n
  _t2 = $gfp p f2
  _t3 = $arith add n 1
  $store _t2 _t3
  _t4 = $gfp p f3
  _t5 = $arith add n 2
  $store _t4 _t5
  $ret p
}

fn main() -> int {
let _t1:&s, _t2:&s, _t3:&s, _t4:&int, _t5:int
bb1:
  _t2 = $call_dir bar(3) then bb2

bb2:
  _t3 = $call_dir baz(_t1, _t2) then bb3

bb3:
  _t4 = $gfp _t3 f1
  _t5 = $load _t4
  $ret _t5

entry:
  _t1 = $call_dir foo(10) then bb1
}

