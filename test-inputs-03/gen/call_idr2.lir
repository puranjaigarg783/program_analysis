f:&(&int, &int) -> &int
g:&(&int, &int) -> &int

extern random:() -> int

fn f(x:&int, y:&int) -> &int {
entry:
  $ret x
}

fn g(x:&int, y:&int) -> &int {
entry:
  $ret y
}

fn main() -> int {
let _t1:int, _t2:&int, _t3:int, func:&(&int, &int) -> &int, p:&int, q:&int, r:&int
bb1:
  _t2 = $call_idr func(p, q) then bb4

bb2:
  func = $copy f
  $jump bb1

bb3:
  func = $copy g
  $jump bb1

bb4:
  r = $copy _t2
  _t3 = $load r
  $ret _t3

entry:
  p = $alloc 1 [_alloc1]
  q = $alloc 1 [_alloc2]
  _t1 = $call_ext random()
  $branch _t1 bb2 bb3
}

